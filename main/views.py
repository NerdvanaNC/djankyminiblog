from django.conf import settings
from django.shortcuts import render
from django.http import HttpResponseRedirect, JsonResponse
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.models import User
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from .forms import NewPost, RegisterForm, UpdateProfileBio, UpdateProfileAvatar
from .models import Post
from django.utils import timezone
from django.core.files.storage import FileSystemStorage
from azure.storage.blob import ContainerClient
import bleach
import datetime
import re
import random

bleach_allowed_tags = ['pre', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'a', 'b', 'blockquote', 'code', 'em', 'i', 'li', 'ol', 'strong', 'ul', 'span']
bleach_allowed_attrs = { '*': ['style'], 'a': ['href', 'title', '_target'] }
bleach_allowed_styles = ['color', 'font-family', 'font-size', 'text-decoration', 'text-align']

# Quotes uwu
quotes_list = {
  'AnaÃ¯s Nin': 'We write to taste life twice, in the moment and in retrospect.',
  'Jack Kerouac, The Dharma Bums': 'One day I will find the right words, and they will be simple.',
  'Saul Bellow': 'You never have to change anything you got up in the middle of the night to write.',
  'Ray Bradbury, Zen in the Art of Writing': 'You must stay drunk on writing so reality cannot destroy you.',
  'Margaret Atwood': 'A word after a word after a word is power.',
  'Charles Baudelaire': 'Always be a poet, even in prose.',
  'Flannery O\'Connor': 'I write to discover what I know.',
}

# Create your views here.
def main(response):
  # Infinite Scrolling Pagination
  # https://simpleisbetterthancomplex.com/tutorial/2017/03/13/how-to-create-infinite-scroll-with-django.html
  all_posts = Post.objects.all()
  current_page = response.GET.get('page', 1)
  paginator_obj = Paginator(all_posts, 5)

  if response.user.is_authenticated:
    try:
      page_obj = paginator_obj.page(current_page)
    except PageNotAnInteger:
      page_obj = paginator_obj.page(1)
    except EmptyPage:
      page_obj = paginator_obj.page(paginator_obj.num_pages)
  else:
    page_obj = all_posts[:5]


  # User Auth Flow
  if response.user.is_authenticated:
    # User logged in
    if response.method == 'POST':
      if 'post' in response.POST:
        form = NewPost(response.POST)
        if form.is_valid():
          u = response.user
          now = timezone.now()
          if (now - u.profile.last_post).total_seconds() > 86400 or u.id == 2:
            # We only allows posts once every 24 hours
            # But this limit doesn't apply to me, as I'm the admin
            post_text = bleach.clean(form.cleaned_data['text'], tags=bleach_allowed_tags, attributes=bleach_allowed_attrs, styles=bleach_allowed_styles)
            if len(post_text) > 30000:
              messages.add_message(response, messages.ERROR, 'I can only handle posts 30,000 characters long. This includes the extra HTML markup generated by using formatting. Please shorten or reformat your post, sorry!', 'danger')
              return HttpResponseRedirect('/')
            p = Post(text = post_text, likes = 0, author = u)
            p.save()
            u.profile.last_post = datetime.datetime.now()
            u.save()
            messages.add_message(response, messages.SUCCESS, 'Done! Your story is out in the world.', 'success')
            return HttpResponseRedirect('/') # If everything's cool; return back to the homepage with a blank form.
          else:
            messages.add_message(response, messages.ERROR, 'You need to wait 24 hours before posting again.', 'danger')
            return HttpResponseRedirect('/')
    else:
      form = NewPost()
  else:
    if response.method == 'POST':
      if 'login' in response.POST:
        form = AuthenticationForm(response.POST)
        username = response.POST.get('username')
        password = response.POST.get('password')
        user = authenticate(response, username=username, password=password)
        if user is not None:
          login(response, user)
          messages.add_message(response, messages.SUCCESS, ('Hey, @{}.'.format(user.username)), 'success')
          return HttpResponseRedirect('/')
        else:
          messages.add_message(response, messages.ERROR, 'Invalid Credentials. Please try again.', 'danger')
          return HttpResponseRedirect('/')
    else:
      form = AuthenticationForm()

  # Time to next post

  if response.user.is_authenticated:
    # How long ago did you post?
    seconds_since_last_post = (timezone.now() - response.user.profile.last_post).total_seconds()
    # How long till you can post again?
    seconds_to_next_post = 86400 - seconds_since_last_post
    # If it's been more than or equal to 24 hours
    if seconds_to_next_post <= 0 or response.user.id == 2:
      time_to_next_post = "no_wait_needed"
    else:
      # Otherwise a countdown showing you how many hours to the next post
      time_to_next_post = str(datetime.timedelta(seconds=seconds_to_next_post)).split('.')[0] # chop off ms
  else:
    time_to_next_post = ""
    seconds_to_next_post = 86400

  # Quotes!

  random_quote_author, random_quote_quote = random.choice(list(quotes_list.items()))
  random_quote = {'author': random_quote_author, 'quote': random_quote_quote}

  response_obj = {
    'form': form,
    'page_obj': page_obj,
    'navactive': 'home',
    'time_to_next_post': time_to_next_post,
    'javascript': {
      'seconds_to_next_post': seconds_to_next_post,
    },
    'quote': random_quote,
  }
  return render(response, 'main/homepage.html', response_obj)



def custom_register(response):
  if response.method == 'POST':
    form = RegisterForm(response.POST)
    if form.is_valid():
      form.save()
      username = form.cleaned_data['username']
      password = form.cleaned_data['password1']
      user = authenticate(response, username=username, password=password)
      if user is not None:
        login(response, user)
        messages.add_message(response, messages.SUCCESS, ('Good to have you here, @{}'.format(user.username)), 'success')
        return HttpResponseRedirect('/')
  else:
    form = RegisterForm()

  return render(response, 'main/register.html', {'form': form})



def custom_logout(response):
  logout(response)
  messages.add_message(response, messages.SUCCESS, 'Logged out. See you again!', 'success')
  return HttpResponseRedirect('/')



def ajax_like(response):
  if response.GET.get('id'):
    p = Post.objects.filter(id=(response.GET.get('id')))
    u = response.user
    if p:
      p = p[0]
      post_already_liked = u.profile.liked_posts.filter(id=p.id)
      if post_already_liked:
        return JsonResponse({'result': 'Already liked.'})
      else:
        likes = p.post_like()
        p.save()
        u.profile.liked_posts.add(p)
        return JsonResponse({'result': likes})

    else:
      return JsonResponse({'result': 'Not found.'})
  else:
    return JsonResponse({'result': "Invalid arguments."})



def ajax_unlike(response):
  if response.GET.get('id'):
    p = Post.objects.filter(id=(response.GET.get('id')))
    u = response.user
    if p:
      p = p[0]
      post_already_liked = u.profile.liked_posts.filter(id=p.id)
      if post_already_liked:
        likes = p.post_unlike()
        p.save()
        u.profile.liked_posts.remove(p)
        return JsonResponse({'result': likes})
      else:
        return JsonResponse({'result': 'Not liked.'})

    else:
      return JsonResponse({'result': 'Not found.'})
  else:
    return JsonResponse({'result': "Invalid arguments."})



def user_profile(response, username):
  requested_user = User.objects.filter(username=username)
  if requested_user:
    requested_user = requested_user[0]
    authored_posts = Post.objects.filter(author=requested_user)
    liked_posts = requested_user.profile.liked_posts.all()

    if response.path.find('liked') >= 0:
      if liked_posts:
        current_page = response.GET.get('page', 1)
        paginator_obj = Paginator(liked_posts, 5)
        try:
          page_obj = paginator_obj.page(current_page)
        except PageNotAnInteger:
          page_obj = paginator_obj.page(1)
        except EmptyPage:
          page_obj = paginator_obj.page(paginator_obj.num_pages)
      else:
        page_obj = None

      page_active = 'liked'
    else:
      if authored_posts:
        current_page = response.GET.get('page', 1)
        paginator_obj = Paginator(authored_posts, 5)
        try:
          page_obj = paginator_obj.page(current_page)
        except PageNotAnInteger:
          page_obj = paginator_obj.page(1)
        except EmptyPage:
          page_obj = paginator_obj.page(paginator_obj.num_pages)
      else:
        page_obj = None

      page_active = 'authored'

    # Form submit
    if response.method == "POST":
      if response.POST.get('bio-update'):
        form = UpdateProfileBio(response.POST)
        if (form.is_valid()) and response.user == requested_user:
          bio = form.cleaned_data['bio']
          if bio != "":
            bio = re.sub("(\\r\\n){3,}", "\r\n\r\n", bio)
            requested_user.profile.bio = bio
            requested_user.profile.save()
      elif response.POST.get('avatar-update'):
        avatarForm = UpdateProfileAvatar(response.POST, response.FILES)
        file = response.FILES.get('avatar_img')
        fs = FileSystemStorage()
        filename = fs.save('avatars/{}'.format(file.name), file)
        uploaded_file_url = fs.url(filename)
        print("***DEBUG***:", uploaded_file_url)
        
        # Using Azure for cloud storage.
        # container_client = ContainerClient(account_url=settings.AZURE_ACCESS_URL, container_name='avatars')
        # with open(uploaded_file_url, 'rb') as file_data:
        #   container_client.upload_blob('Xuur8js.jpg', data=file_data)
    
    form = UpdateProfileBio()
    avatarForm = UpdateProfileAvatar()

    response_obj = {
      'requested_user': requested_user,
      'page_obj': page_obj,
      'active': page_active,
      'num_posts': authored_posts.count(),
      'form': form,
      'avatarForm': avatarForm,
    }
    return render(response, 'main/profile.html', response_obj)
  else:
    messages.add_message(response, messages.INFO, 'User not found; did you get the username right?', 'info')


def about(response):
  return render(response, 'main/about.html', {'navactive': 'about'})